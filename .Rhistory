install.packages("dplyr")
install.packages("knitr", lib="C:/Users/gobck/Anaconda3/R/library")
remove.packages("dplyr", lib="~/R/win-library/3.4")
install.packages("dplyr", lib="C:/Users/gobck/Anaconda3/R/library")
install.packages("ggplot2", lib="C:/Users/gobck/Anaconda3/R/library")
# Load the Data
getwd()
list.files()
wineData <- read.csv("wineQualityWhites.csv")
names(wineData)
summary(wineData)
ggplot(data = wineData, mapping = aes(x=quality)) +
geom_histogram(binwidth=1)
# Load the Data
# getwd()
# list.files()
wineData <- read.csv("wineQualityWhites.csv")
# names(wineData)
ggplot(data = wineData, mapping = aes(x=quality)) +
geom_histogram(binwidth=1)
ggplot(data = wineData, mapping = aes(x=quality)) +
geom_histogram(binwidth=1)
install.packages("ggplot2")
library("ggplot2", lib.loc="C:/Users/gobck/Anaconda3/R/library")
detach("package:ggplot2", unload=TRUE)
remove.packages("ggplot2", lib="~/R/win-library/3.4")
# Load all of the packages that you end up using in your analysis in this code
# chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk. This
# prevents the code from displaying in the knitted HTML output. You should set
# echo=FALSE for all code chunks in your file, unless it makes sense for your
# report to show the code that generated a particular plot.
# The other parameters for "message" and "warning" should also be set to FALSE
# for other code chunks once you have verified that each plot comes out as you
# want it to. This will clean up the flow of your report.
library(ggplot2)
library(knitr)
library(dplyr)
ggplot(data = wineData, mapping = aes(x=quality)) +
geom_histogram(binwidth=1)
install.packages(c("RJDBC", "xml2"), lib="C:/Users/gobck/Anaconda3/R/library")
ggplot(aes(x = quality), data = wine) + geom_bar() +
scale_x_continuous(breaks = seq(2, 10, 1))
ggplot(aes(x = quality), data = wineData) + geom_bar() +
scale_x_continuous(breaks = seq(2, 10, 1))
fah = plot.hist('fixed.acidity', wineData, 100)
plot.hist <- function(x.var, df, bs)
{
ggplot(df, aes_string(x = x.var)) + geom_histogram(bins = bs)
}
fah = plot.hist('fixed.acidity', wineData, 100)
fah1 = plot.hist('fixed.acidity', wineData, 100) +
scale_x_continuous(limits = c(4, 12), breaks = seq(4, 12, 1))
grid.arrange(fah, fah1)
plot.hist <- function(x.var, df, bs)
{
ggplot(df, aes_string(x = x.var)) + geom_histogram(bins = bs)
}
fah = plot.hist('fixed.acidity', wineData, 100)
fah1 = plot.hist('fixed.acidity', wineData, 100) +
scale_x_continuous(limits = c(4, 12), breaks = seq(4, 12, 1))
grid.arrange(fah, fah1)
# Load all of the packages that you end up using in your analysis in this code
# chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk. This
# prevents the code from displaying in the knitted HTML output. You should set
# echo=FALSE for all code chunks in your file, unless it makes sense for your
# report to show the code that generated a particular plot.
# The other parameters for "message" and "warning" should also be set to FALSE
# for other code chunks once you have verified that each plot comes out as you
# want it to. This will clean up the flow of your report.
library(ggplot2)
library(knitr)
library(dplyr)
library(gridExtra)
install.packages("gridExtra", lib="C:/Users/gobck/Anaconda3/R/library")
# Load all of the packages that you end up using in your analysis in this code
# chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk. This
# prevents the code from displaying in the knitted HTML output. You should set
# echo=FALSE for all code chunks in your file, unless it makes sense for your
# report to show the code that generated a particular plot.
# The other parameters for "message" and "warning" should also be set to FALSE
# for other code chunks once you have verified that each plot comes out as you
# want it to. This will clean up the flow of your report.
library(ggplot2)
library(knitr)
library(dplyr)
library(gridExtra)
library(GGally)
install.packages("GGally", lib="C:/Users/gobck/Anaconda3/R/library")
# Load all of the packages that you end up using in your analysis in this code
# chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk. This
# prevents the code from displaying in the knitted HTML output. You should set
# echo=FALSE for all code chunks in your file, unless it makes sense for your
# report to show the code that generated a particular plot.
# The other parameters for "message" and "warning" should also be set to FALSE
# for other code chunks once you have verified that each plot comes out as you
# want it to. This will clean up the flow of your report.
library(ggplot2)
library(knitr)
library(dplyr)
library(gridExtra)
library(GGally)
library(scales)
library(RColorBrewer)
fah = plot.hist('fixed.acidity', wineData, 100)
fah1 = plot.hist('fixed.acidity', wineData, 100) +
scale_x_continuous(limits = c(4, 12), breaks = seq(4, 12, 1))
grid.arrange(fah, fah1)
#summary(wineData$fixed.acidity)
fah = plot.hist('fixed.acidity', wineData, 100)
fah1 = plot.hist('fixed.acidity', wineData, 100) +
scale_x_continuous(limits = c(4, 12), breaks = seq(4, 12, 1))
grid.arrange(fah, fah1)
summary(wineData$fixed.acidity)
fah = plot.hist('fixed.acidity', wineData, 100)
fah1 = plot.hist('fixed.acidity', wineData, 100) +
scale_x_continuous(limits = c(4, 12), breaks = seq(4, 12, 1))
grid.arrange(fah, fah1)
#summary(wineData$fixed.acidity)
plot.hist('volatile.acidity', wineData, 100) +
scale_x_continuous(limits = c(0, 0.75), breaks=seq(0, 0.75, 0.1))
plot.hist('citric.acid', wineData, 100) +
scale_x_continuous(limits = c(0, 1.0), breaks = seq(0, 1.0, .1))
summary(wineData$citric.acid)
rs = plot.hist('residual.sugar', wineData, 75)
logrs = plot.hist('residual.sugar', wineData, 75)  +
scale_x_continuous(trans = log10_trans(), breaks=c(0, 1.5, 3, 10, 20, 60))
#summary(wine$residual.sugar)
grid.arrange(rs, logrs)
rsiqr<-8.2 - 1.7 #using 1st & 3rd quartile from summary to find IQR; we'll use this later for outliers
c = plot.hist('chlorides', wineData, 75)
c1 = plot.hist('chlorides', wineData, 75) + scale_x_continuous(limits = c(0, 0.2))
#summary(wine$chlorides)
grid.arrange(c, c1)
cbp = ggplot(wineData, aes(y = chlorides, x = 1)) + geom_boxplot(color = 'blue') +
geom_jitter(aes(x = 1, y = chlorides), alpha = 0.1) +
geom_boxplot(color = 'blue', alpha = 1/2) + coord_flip()
grid.arrange(c, cbp)
fsd = plot.hist('free.sulfur.dioxide', wineData, 100)
fsd1 = plot.hist('free.sulfur.dioxide', wineData, 100) + scale_x_continuous(limits =
c(quantile(wine$free.sulfur.dioxide, 0.01),
quantile(wine$free.sulfur.dioxide, 0.99)))
fsd = plot.hist('free.sulfur.dioxide', wineData, 100)
fsd1 = plot.hist('free.sulfur.dioxide', wineData, 100) + scale_x_continuous(limits =
c(quantile(wineData$free.sulfur.dioxide, 0.01),
quantile(wineData$free.sulfur.dioxide, 0.99)))
tsd = plot.hist('total.sulfur.dioxide', wineData, 100)
tsd1 = plot.hist('total.sulfur.dioxide', wineData, 100) +
scale_x_continuous(limits = c(quantile(wineData$total.sulfur.dioxide, 0.01),
quantile(wineData$total.sulfur.dioxide, 0.99)))
grid.arrange(fsd, tsd, fsd1, tsd1 )
#summary(wine$free.sulfur.dioxide)
#summary(wine$total.sulfur.dioxide)
d30 = plot.hist('density', wineData, 30)
ds = ggplot(wineDAta, aes(y = density, x = 1)) +
geom_jitter(aes(x = 1, y = density), alpha = 0.1) +
geom_boxplot(color = 'blue', alpha = 1/2) + coord_flip()
d30 = plot.hist('density', wineData, 30)
ds = ggplot(wineData, aes(y = density, x = 1)) +
geom_jitter(aes(x = 1, y = density), alpha = 0.1) +
geom_boxplot(color = 'blue', alpha = 1/2) + coord_flip()
d100 = plot.hist('density', wineData, 100)
grid.arrange(d30, ds, d100)
#summary(wine$density)
diqr<-0.9961 - 0.9917 # finding iqr for outlier purposes when graphing later
ph = plot.hist('pH', wineData, 30)
ph1 =  ggplot(wineData, aes(y = pH, x = 1)) +
geom_jitter(aes(x = 1, y = pH), alpha = 0.2) +
geom_boxplot(color = 'blue', alpha = 1/4) + coord_flip()
ph2 = plot.hist('pH', wineData, 100)
grid.arrange(ph, ph1, ph2)
#summary(wine$pH)
s0 = plot.hist('sulphates', wineData, 30)
s1 =  ggplot(wineData, aes(y = sulphates, x = 1)) +
geom_jitter(aes(x = 1, y = sulphates), alpha = 0.15) +
geom_boxplot(color = 'blue', alpha = 1/4) + coord_flip()
s2 = plot.hist('sulphates', wineData, 75)
grid.arrange(s0, s1, s2)
#summary(wine$sulphates)
ggplot(aes(x = factor(quality), y = alcohol), data = wineData) + geom_boxplot() +
stat_summary(fun.y = mean, size = 3, color = 'green', geom = 'point') +
ylab("Alcohol (percentage of volume)") +
xlab("Wine Quality (scaled from 0-10)") +
ggtitle("Alcohol Content by Wine Quality") +
geom_hline(yintercept = 10.51, color = 'green', alpha = 0.3) +
geom_hline(yintercept = 10.4, alpha = 0.4 ) +
theme(plot.title = element_text(hjust = 0.5, size = 19, face = 'bold'),
panel.border = element_rect(colour = "black", fill = NA))
ggplot(aes(x = chlorides, y = alcohol),
data = subset(wineData, wineData$quality != 6)) +
geom_point(aes(color = factor(quality))) +
labs(x = expression(Chlorides~(g/dm^3)),
y = "Alcohol (percentage of volume)") +
scale_color_brewer(type = 'seq',
guide = guide_legend(title = 'Wine Quality',
reverse = T,
override.aes = list(alpha = 1,
size = 2))) +
ggtitle("Alcohol by Chlorides for Differing Quality White Wines") +
theme(plot.title = element_text(hjust = 0.25, size = 19, face = 'bold'),
panel.border = element_rect(colour = "black", fill = NA))
rsda <- ggplot(aes(x = residual.sugar, y = density), data = wineData) +
geom_point(aes(color = alcohol)) +
coord_cartesian(xlim = c(0, 8.2 + 1.5*rsiqr), ylim = c(0.987, 1.005)) +
labs(x = expression(Residual~Sugar~(g/dm^3)),
y = expression(Density~(g/cm^3)),
title = "Density by Residual Sugar colored by Alcohol Percentage") +
theme(plot.title = element_text(hjust = 0.5, size = 17, face = 'bold'),
panel.border = element_rect(colour = "black", fill = NA))
rsdq <- ggplot(aes(x = residual.sugar, y = density),
data = subset(wineData, wineData$quality != 6)) +
geom_point(aes(color = factor(quality))) +
scale_color_brewer(type = 'seq') +
coord_cartesian(xlim = c(0, 8.2 + 1.5*rsiqr)) +
labs(x = expression(Residual~Sugar~(g/dm^3)), y = expression(Density~(g/cm^3)),
title = "Density by Residual Sugar colored by Quality") +
theme(plot.title = element_text(hjust = 0.5, size = 17, face = 'bold'),
panel.border = element_rect(colour = "black", fill = NA))
grid.arrange(rsda, rsdq)
summary(wineData)
str(wineData)
summary(wineData$fixed.acidity)
plot.hist <- function(xvariable, dataframe, bins)
{
ggplot(df, aes_string(x = x.var)) + geom_histogram(bins = bs)
}
fah = plot.hist('fixed.acidity', wineData, 100)
plot.hist <- function(xvariable, dataframe, bins)
{
ggplot(df, aes_string(x = xvariable)) + geom_histogram(bins = bs)
}
plot.hist <- function(xvariable, dataframe, bins)
{
ggplot(dataframe, aes_string(x = xvariable)) + geom_histogram(bins = bins)
}
fah = plot.hist('fixed.acidity', wineData, 100)
fah1 = plot.hist('fixed.acidity', wineData, 100) +
scale_x_continuous(limits = c(4, 12), breaks = seq(4, 12, 1))
grid.arrange(fah, fah1)
#summary(wineData$fixed.acidity)
summary(wineData$fixed.acidity)
# Load all of the packages that you end up using in your analysis in this code
# chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk. This
# prevents the code from displaying in the knitted HTML output. You should set
# echo=FALSE for all code chunks in your file, unless it makes sense for your
# report to show the code that generated a particular plot.
# The other parameters for "message" and "warning" should also be set to FALSE
# for other code chunks once you have verified that each plot comes out as you
# want it to. This will clean up the flow of your report.
library(ggplot2)
library(knitr)
library(dplyr)
library(gridExtra)
library(GGally)
library(scales)
library(RColorBrewer)
# Load the Data
# getwd()
# list.files()
wineData <- read.csv("wineQualityWhites.csv")
# names(wineData)
summary(wineData)
str(wineData)
wineData <- subset(wineData, select=-X)
ggplot(data = wineData, mapping = aes(x=quality)) +
geom_histogram(binwidth=1)
ggplot(aes(x = quality), data = wineData) + geom_bar() +
scale_x_continuous(breaks = seq(2, 10, 1))
plot.hist <- function(xvariable, dataframe, bins)
{
ggplot(dataframe, aes_string(x = xvariable)) + geom_histogram(bins = bins)
}
summary(wineData$fixed.acidity)
fah = plot.hist('fixed.acidity', wineData, 100)
fah1 = plot.hist('fixed.acidity', wineData, 100) +
scale_x_continuous(limits = c(4, 12), breaks = seq(4, 12, 1))
grid.arrange(fah, fah1)
summary(wineData$volatile.acidity)
summary(wineData$citric.acid)
summary(wineData$residual.sugar)
